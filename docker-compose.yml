# Docker Compose configuration for AI-EEG Learning Platform

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ai-eeg-db
    environment:
      POSTGRES_DB: ai_eeg_learning
      POSTGRES_USER: ai_eeg_user
      POSTGRES_PASSWORD: ai_eeg_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-eeg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_eeg_user -d ai_eeg_learning"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-eeg-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-eeg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: ai-eeg-backend
    environment:
      - DATABASE_URL=postgresql://ai_eeg_user:ai_eeg_password_2025@db:5432/ai_eeg_learning
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
      - DEBUG=true
      - CORS_ORIGINS=["http://localhost:3000", "http://frontend:3000"]
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    ports:
      - "8000:8000"
    networks:
      - ai-eeg-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    container_name: ai-eeg-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - ai-eeg-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ML Service (Optional - for advanced ML processing)
  ml_service:
    build:
      context: .
      dockerfile: docker/ml.Dockerfile
    container_name: ai-eeg-ml
    environment:
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./ml_models:/app
      - ml_models_data:/app/models
    ports:
      - "8001:8001"
    networks:
      - ai-eeg-network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - ml

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-eeg-prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-eeg-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ai-eeg-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - ai-eeg-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-eeg-network:
    driver: bridge
