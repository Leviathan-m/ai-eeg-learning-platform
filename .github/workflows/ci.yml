name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write

jobs:
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: black --check --diff .

    - name: Import sorting check with isort
      run: isort --check-only --diff .

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: sqlite:///./test.db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/web

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/web/package-lock.json

    - name: Install dependencies (tolerant)
      run: npm install --legacy-peer-deps

    - name: Lint code
      run: npm run lint

    - name: Run tests (allow no tests)
      run: npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true

    - name: Build application
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/backend.Dockerfile
        push: false
        tags: ai-eeg-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/frontend.Dockerfile
        push: false
        tags: ai-eeg-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check for dependency vulnerabilities (non-blocking)
      run: |
        pip install --upgrade pip safety
        safety scan --full-report --file=backend/requirements.txt || true

    - name: Audit Node.js dependencies (non-blocking)
      run: |
        cd frontend/web
        npm audit --audit-level=moderate || true
